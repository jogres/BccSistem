-- 1) Tabela de administradores
CREATE TABLE cad_adm (
  idAdm      INT            PRIMARY KEY AUTO_INCREMENT,
  cnpj       VARCHAR(18)    NOT NULL UNIQUE,
  nome       VARCHAR(150)   NOT NULL
);

-- 2) Níveis de comissionamento
CREATE TABLE master (
  idMaster   INT            PRIMARY KEY,
  primeira   FLOAT          NOT NULL,
  segunda    FLOAT          NOT NULL,
  terceira   FLOAT          NOT NULL,
  quarta     FLOAT          NOT NULL,
  nome       VARCHAR(100)   NOT NULL,
  idAdm      INT            NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_master_adm FOREIGN KEY (idAdm) REFERENCES cad_adm(idAdm)
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE classic (
  idClassic  INT            PRIMARY KEY,
  primeira   FLOAT          NOT NULL,
  segunda    FLOAT          NOT NULL,
  terceira   FLOAT          NOT NULL,
  quarta     FLOAT          NOT NULL,
  nome       VARCHAR(100)   NOT NULL,
  idAdm      INT            NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_classic_adm FOREIGN KEY (idAdm) REFERENCES cad_adm(idAdm)
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE basic (
  idBasic    INT            PRIMARY KEY,
  primeira   FLOAT          NOT NULL,
  segunda    FLOAT          NOT NULL,
  terceira   FLOAT          NOT NULL,
  quarta     FLOAT          NOT NULL,
  nome       VARCHAR(100)   NOT NULL,
  idAdm      INT            NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_basic_adm   FOREIGN KEY (idAdm) REFERENCES cad_adm(idAdm)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- 3) Tabela de vendas com PK técnica e campo de negócio idVenda
CREATE TABLE venda (
  id         INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
  idVenda    INT            NOT NULL,            -- número do contrato
  tipo       VARCHAR(50)    NOT NULL,
  valor      FLOAT          NOT NULL,
  dataV      DATE           NOT NULL,
  idAdm      INT            NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT ux_venda_idVenda UNIQUE (idVenda),
  CONSTRAINT fk_venda_adm FOREIGN KEY (idAdm) REFERENCES cad_adm(idAdm)
    ON DELETE RESTRICT ON UPDATE CASCADE
);

-- 4) Funcionários (sem idVenda direto)
CREATE TABLE cad_fun (
  idFun      INT            PRIMARY KEY,
  nome       VARCHAR(100)   NOT NULL,
  endereco   VARCHAR(200)   NOT NULL,
  numero     VARCHAR(20)    NOT NULL,
  dataN      DATE           NOT NULL,
  cpf        VARCHAR(14)    NOT NULL UNIQUE,
  email      VARCHAR(150)   NOT NULL,
  senha      VARCHAR(255)   NOT NULL,
  acesso     VARCHAR(100)   NOT NULL,
  ativo      CHAR(10)       NOT NULL,
  idMaster   INT            NULL,
  idClassic  INT            NULL,
  idBasic    INT            NULL,
  nivel      VARCHAR(50)    NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_cadfun_master   FOREIGN KEY (idMaster)  REFERENCES master  (idMaster)  ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT fk_cadfun_classic  FOREIGN KEY (idClassic) REFERENCES classic (idClassic) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT fk_cadfun_basic    FOREIGN KEY (idBasic)   REFERENCES basic   (idBasic)   ON DELETE SET NULL ON UPDATE CASCADE
);

-- 5) Junção vendas ↔ funcionários
CREATE TABLE venda_fun (
  idFun     INT            NOT NULL,
  id        INT            NOT NULL, -- referencia venda.id (PK técnica)
  created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (idFun, id),
  CONSTRAINT fk_vendafun_fun   FOREIGN KEY (idFun) REFERENCES cad_fun(idFun)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_vendafun_venda FOREIGN KEY (id)    REFERENCES venda(id)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- 6) Junção vendas ↔ clientes
CREATE TABLE venda_cli (
  idCli     INT            NOT NULL,
  id        INT            NOT NULL, -- referencia venda.id
  created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (idCli, id),
  CONSTRAINT fk_vendacli_cli   FOREIGN KEY (idCli) REFERENCES cad_cli(idCli)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_vendacli_venda FOREIGN KEY (id)    REFERENCES venda(id)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- 7) Clientes (sem idVenda direto)
CREATE TABLE cad_cli (
  idCli      INT            PRIMARY KEY AUTO_INCREMENT,
  nome       VARCHAR(100)   NOT NULL,
  cpf        VARCHAR(14)    NOT NULL UNIQUE,
  endereco   VARCHAR(200)   NOT NULL,
  telefone   VARCHAR(20)    NOT NULL,
  tipo       VARCHAR(50)    NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 8) Comissões
CREATE TABLE comissao (
  idCom      INT            PRIMARY KEY AUTO_INCREMENT,
  idVenda    INT            NOT NULL,
  totalV     FLOAT          NOT NULL,
  mesC       DATE           NOT NULL,
  idFun      INT            NOT NULL,
  primeira   FLOAT          NOT NULL,
  segunda    FLOAT          NOT NULL,
  terceira   FLOAT          NOT NULL,
  quarta     FLOAT          NOT NULL,
  totalC     FLOAT          NOT NULL,
  created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_comissao_venda FOREIGN KEY (idVenda) REFERENCES venda(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_comissao_fun   FOREIGN KEY (idFun)   REFERENCES cad_fun(idFun)
    ON DELETE RESTRICT ON UPDATE CASCADE
);
